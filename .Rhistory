library(tidyverse)
library(nflfastR) # has data & teams, colors, & logos needed
library(vip) # tell us variable importance of each variable
library(ggimage) # plot teams
library(dplyr) # don't we need this for group_by?
# load play by play data (goes back to 1999)
pbp <- load_pbp(2018:2023) # function from nfl package
# create dataset w/ just 2 pt conversions
# pipe is cmd-shift-m
two_points <- pbp %>%
# use comma in filter statement if multiple filter conditions
filter(two_point_attempt == 1, !is.na(play_type)) # don't want any nas for play type, don't want play type that is data error
two_points %>%
group_by(two_point_conv_result) %>%
tally(sort = T) # tallies what happens on 2 pt conversions
two_points <- two_points %>%
# create indicator variable to indicate 2 pt conversion result
# ifelse(test, yes, no) returns yes if test true, no if test false
mutate(two_point_conv_result = ifelse(two_point_conv_result == "success", 1, 0))
# which variables influence 2 pt conversions?
# look at which variables correlate w/ whether or not team made 2 pt conversion
# what kind of relationship does variable have with it?
# game's current score
two_points %>%
group_by(posteam_score) %>%
summarize(count = n(), two_point_conv_rate = mean(two_point_conv_result)) %>%
# x axis is posteam_score, y axis is two_point_conv_rate
ggplot(aes(x = posteam_score, y = two_point_conv_rate)) + geom_bar(aes(fill = two_point_conv_rate), stat = "identity") + theme_minimal()
# time remaining
two_points %>%
group_by(qtr) %>%
summarize(count = n(), two_point_conv_rate = mean(two_point_conv_result)) %>%
# x axis is qtr, y axis is two_point_conv_rate
ggplot(aes(x = qtr, y = two_point_conv_rate)) + geom_bar(aes(fill = two_point_conv_rate), stat = "identity") + theme_minimal()
# create team plot
team_two_point_23 <- two_points %>%
# filter on 2023
filter(season == 2023) %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
team_two_point_23
test <- team_two_point_23 %>%
group_by(count) %>%
summarize(succ = mean(succ), rate = mean(rate))
test
# could also add column for count of counts
table(test$count)
# 49ers converted for 2 pts 0 times in the 2023 season
print(teams_colors_logos$team_logo_espn[-c(19, 27, 29, 30, 33)])
team_two_point_23 %>%
ggplot(aes(x = posteam, y = succ))  +
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 29, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Team", y = "2 Pt Conversion Rate",
title = "NFL 2023 2 Pt Conversion Rate") # +
two_points <- pbp %>%
# use comma in filter statement if multiple filter conditions
filter(two_point_attempt == 1, !is.na(play_type)) # don't want any nas for play type, don't want play type that is data error
two_points %>%
group_by(two_point_conv_result) %>%
tally(sort = T) # tallies what happens on 2 pt conversions
two_points <- two_points %>%
mutate(two_point_conv_result = ifelse(two_point_conv_result == "success", 1, 0))
# create team plot
team_two_point_23 <- two_points %>%
# # filter on 2023
# filter(season == 2023) %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
filter(yardline_100 == 2,
two_point_attempt != 1,
field_goal_attempt != 1,
!is.na(touchdown),
!is.na(play_type))
# load play by play data (goes back to 1999)
pbp <- load_pbp(2018:2023) # function from nfl package
two_points <- pbp %>%
# use comma in filter statement if multiple filter conditions
filter(two_point_attempt == 1, !is.na(play_type)) # don't want any nas for play type, don't want play type that is data error
two_points %>%
group_by(two_point_conv_result) %>%
tally(sort = T) # tallies what happens on 2 pt conversions
two_points <- two_points %>%
mutate(two_point_conv_result = ifelse(two_point_conv_result == "success", 1, 0))
team_two_point_23 <- two_points %>%
# # filter on 2023
# filter(season == 2023) %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
# don't want to include 2-pt conversion attempts or field goal kicks
td_points <- pbp %>%
filter(yardline_100 == 2,
two_point_attempt != 1,
field_goal_attempt != 1,
!is.na(touchdown),
!is.na(play_type))
pbp[1614]
pbp[1614, ]
pbp[play_id == 1614]
pbp[pbp$play_id == 1614]
pbp %>% filter(play_id == 1614)
pbp[1614, ]
View(td_points)
View(pbp %>% filter(play_id == 1614))
td_points %>%
summarize(total_td = sum(touchdown),
pass = sum(pass_touchdown),
rush = sum(rush_touchdown),
return = sum(return_touchdown))
team_td_point_23 <- td_points %>%
# # filter on 2023
# filter(season == 2023) %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(touchdown),
rate = succ/count)
two_td_comp %>%
ggplot(aes(x = team, y = two_min_td))  +
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Team", y = "Difference",
title = "Difference between 2 Pt Conversion Rate & Td from 2 Yd Rate from 2018-2023") +
geom_hline(yintercept = 0)
two_min_td <- team_two_point_23$rate - team_td_point_23$rate
team <- team_two_point_23$posteam
two_td_comp <- data.frame(team, two_min_td)
two_td_comp
two_td_comp %>%
ggplot(aes(x = team, y = two_min_td))  +
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Team", y = "Difference",
title = "Difference between 2 Pt Conversion Rate & Td from 2 Yd Rate from 2018-2023") +
geom_hline(yintercept = 0)
mean(team_two_point_23$rate)
mean(team_td_point_23$rate)
sd(team_two_point_23$rate)
sd(team_td_point_23$rate)
t.test(team_two_point_23$rate, team_td_point_23$rate)
fourth_downs <- pbp %>%
# use comma in filter statement if multiple filter conditions
filter(down == 4, !is.na(play_type)) # don't want any nas for play type, don't want play type that is data error
fourth_downs %>%
group_by(play_type) %>%
tally(sort = T) # tallies what happens on 4th downs
fourth_downs <- fourth_downs %>%
# create indicator variable to indicate if went for 4th down or not
# ifelse(test, yes, no) returns yes if test true, no if test false
mutate(went_for_it = ifelse(play_type %in% c("pass", "run"), 1, 0)) # pass & run indicates went for it
# which variables influence 4th downs?
# look at which variables correlate w/ whether or not team went for 4th down
# what kind of relationship does variable have with it?
# ex: 4th & 1 way higher likelihood than 4th & 20
fourth_downs %>%
group_by(ydstogo) %>%
summarize(count = n(), went_for_it_rate = mean(went_for_it)) %>%
filter(count >= 5) %>%
# x axis is ydstogo, y axis is went_for_it_rate
ggplot(aes(x = ydstogo, y = went_for_it_rate)) + geom_bar(aes(fill = went_for_it_rate), stat = "identity") + theme_minimal()
fourth_downs %>%
group_by(yardline_100) %>%
summarize(count = n(), went_for_it_rate = mean(went_for_it)) %>%
filter(count >= 5) %>%
ggplot(aes(x = yardline_100, y = went_for_it_rate)) + geom_bar(aes(fill = went_for_it_rate), stat = "identity") + theme_minimal()
# create logistic regression model
# glm is used to fit generalized linear models
# x ~ y, x is variable we want to predict, y is all the things we want to add to it
# account win probability (wp) since if you're down by a lot in the 4th quarter, probably want to go for 4th down more
# this makes logistic regression model for us
log_fourth <- glm(went_for_it ~ ydstogo + yardline_100 + wp,
data = fourth_downs)
log_fourth
# if we start w/ intercept & go form 0 to 10 wp, can expect intercept to go down 3.2% chance
summary(log_fourth)
# get variable importance graph, more useful w/ decision tree models when there isn't intercept to go off of
vip(log_fourth)
# to account for covariance, ex: ydstogo & yardline_100 change w/ each other, square indicator variables
log_fourth_co <- glm(went_for_it ~ (ydstogo + yardline_100 + wp)^2,
data = fourth_downs)
# create 4th downs plot
# fitted values gives probabilities for every 4th down
fourth_downs %>%
mutate(pred_prob = log_fourth$fitted.values) %>%
ggplot(aes(x = ydstogo)) +
geom_line(aes(y = pred_prob), color = "black", size = 2) +
# since using went_for_it in y-axis, include in aes()
geom_point(aes(y = went_for_it, color = ifelse(went_for_it == 1, "darkgreen", "darkred"), alpha = .8)) +
scale_color_identity() +
theme_minimal() +
labs(x = "Yards to Go", y = "Chance Offense Goes For It (0-1)")
fourth_downs <- fourth_downs %>%
mutate(pred_prob = log_fourth$fitted.values) %>%
# fourth down overexpected
mutate(fourth_oe = went_for_it - pred_prob)
# create team plot
team_fourth_23 <- fourth_downs %>%
# filter on 2023
filter(season == 2023) %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
# expected 4th downs model sees for them
exp_fourths = sum(pred_prob),
# actual 4th downs for how often they actually went for it
actual_fourths = sum(went_for_it),
# what's their 4th down overexpected
fourths_oe = sum(fourth_oe))
team_fourth_23 %>%
ggplot(aes(x = exp_fourths, y = actual_fourths)) +
geom_hline(yintercept = mean(team_fourth_23$actual_fourths), linetype = "dashed") +
geom_vline(xintercept = mean(team_fourth_23$exp_fourths), linetype = "dashed") +
geom_smooth(method = "lm", color = "black", size = 1.5, alpha = .5, se = FALSE) +
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Expected 4th Down Go's", y = "Actual 4th Down Go's",
title = "Team 4th Down Actual & Expected Go's",
subtitle = "Based on a logistic regression model") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 8)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 8))
library(tidyverse)
library(nflfastR) # has data & teams, colors, & logos needed
library(vip) # tell us variable importance of each variable
library(ggimage) # plot teams
library(dplyr)
# create dataset w/ just 2 pt conversions
two_points <- pbp %>%
# use comma in filter statement if multiple filter conditions
filter(two_point_attempt == 1, !is.na(play_type)) # don't want any nas for play type, don't want play type that is data error
two_points %>%
group_by(two_point_conv_result) %>%
tally(sort = T) # tallies what happens on 2 pt conversions
# convert result to binary
two_points <- two_points %>%
mutate(two_point_conv_result = ifelse(two_point_conv_result == "success", 1, 0))
# create team plot
team_two_point_23 <- two_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
View(team_two_point_23)
two_pt_24 <- team_two_point %>% filter(FY == 2024)
# create team plot
team_two_point <- two_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
two_pt_24 <- team_two_point %>% filter(FY == 2024)
two_pt_24 <- team_two_point %>% filter(Year == 2024)
two_pt_24 <- team_two_point %>% filter(season == 2024)
two_pt_24 <- two_points %>%
filter(season == 2024)
two_pt_24 <- two_points %>%
filter(season == 2024) %>%
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
two_pt_24 <- two_points %>%
filter(season == 2024) %>%
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
View(two_pt_24)
two_pt_24 <- two_points %>%
filter(season == 2023) %>%
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
two_pt_23 <- two_points %>%
filter(season == 2023) %>%
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
# create team plot
team_two_point <- two_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
type(team_two_point)
dtype(team_two_point)
typeof(team_two_point)
# create 2 pt conversion dataframe
team_two_point <- two_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
View(team_two_point)
# create 2 pt conversion dataframe
team_two_point <- two_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
typeof(team_two_point)
class(team_two_point)
# also takes care of row 1614 edge case (thank you SF & SEA)
# does this ensure the team that made the touchdown is the team that was 2 yds away?
# could also include 98 yd tds
pbp[1614, ]
mean(team_two_point$rate)
mean(team_td_point$rate)
td_points <- pbp %>%
filter(yardline_100 == 2, # only want td's from 2 yd line
two_point_attempt != 1, # don't include 2-pt conversion attemps
field_goal_attempt != 1, # don't include field goal attempts
# don't include if na
!is.na(touchdown),
!is.na(play_type))
# just for fun, types of touchdowns --> rushing most common
td_points %>%
summarize(total_td = sum(touchdown),
pass = sum(pass_touchdown),
rush = sum(rush_touchdown),
return = sum(return_touchdown))
team_td_point <- td_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(touchdown),
rate = succ/count)
mean(team_td_point$rate)
sd(team_two_point$rate)
sd(team_td_point$rate)
# test for statistically significant difference
t.test(team_two_point_23$rate, team_td_point_23$rate)
two_td_comp %>%
ggplot(aes(x = team, y = two_min_td))  +
# -c(19, 27, 30, 33)] to get rid of repeat team logos
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Team", y = "Difference",
title = "Difference between 2 Pt Conversion Rate & Td from 2 Yd Rate from 2018-2023") +
geom_hline(yintercept = 0)
two_td_comp %>%
ggplot(aes(x = team, y = two_min_td))  +
# -c(19, 27, 30, 33)] to get rid of repeat team logos
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Team", y = "Difference",
title = "Difference between 2 Pt Conversion Rate and 2 Yd Td Rate from 2018-2023") +
geom_hline(yintercept = 0)
library(tidyverse)
library(nflfastR) # datasets, teams, colors, & logos
library(vip) # variable importance of each variable
library(ggimage) # plot teams
library(dplyr)
# load play by play data (goes back to 1999)
pbp <- load_pbp(2018:2023) # function from nfl package
# create dataset w/ just 2 pt conversions
two_points <- pbp %>%
# use comma in filter statement if multiple filter conditions
filter(two_point_attempt == 1, !is.na(play_type)) # don't want any nas for play type, don't want play type that is data error
two_points %>%
group_by(two_point_conv_result) %>%
tally(sort = T) # tallies what happens on 2 pt conversions
# convert result to binary
two_points <- two_points %>%
mutate(two_point_conv_result = ifelse(two_point_conv_result == "success", 1, 0))
# create 2 pt conversion dataframe
team_two_point <- two_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(two_point_conv_result),
rate = succ/count)
# create dataset w/ td's from 2 yd line
td_points <- pbp %>%
filter(yardline_100 == 2, # only want td's from 2 yd line
two_point_attempt != 1, # don't include 2-pt conversion attempts
field_goal_attempt != 1, # don't include field goal attempts
# don't include if na
!is.na(touchdown),
!is.na(play_type))
# just for fun, types of touchdowns --> rushing most common
td_points %>%
summarize(total_td = sum(touchdown),
pass = sum(pass_touchdown),
rush = sum(rush_touchdown),
return = sum(return_touchdown))
team_td_point <- td_points %>%
# group by possession team
group_by(posteam) %>%
summarize(count = n(),
succ = sum(touchdown),
rate = succ/count)
# merging 2 pt conversion & 2 yd td datasets
team <- team_two_point$posteam
two_min_td <- team_two_point$rate - team_td_point$rate
two_td_comp <- data.frame(team, two_min_td)
two_td_comp %>%
ggplot(aes(x = team, y = two_min_td))  +
# -c(19, 27, 30, 33)] to get rid of repeat team logos
geom_image(aes(image = teams_colors_logos$team_logo_espn[-c(19, 27, 30, 33)]), asp = 16/9, size = .05) +
theme_minimal() +
labs(x = "Team", y = "Difference",
title = "Difference between 2 Pt Conversion Rate and 2 Yd Td Rate from 2018-2023") +
geom_hline(yintercept = 0)
setwd("/Users/amy/Desktop/csbutnot15/nfl-2pt-conversions")
